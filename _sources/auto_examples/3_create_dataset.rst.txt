
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3_create_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3_create_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3_create_dataset.py:


Creating a dataset
===========================

This example shows how to create a dataset for training a deep learning model.


.. GENERATED FROM PYTHON SOURCE LINES 11-14

In this example we will create a dataset that was used in our real-time paper [1]_.

.. [1] Sîmpetru, R.C., März, M., Del Vecchio, A., 2023. Proportional and Simultaneous Real-Time Control of the Full Human Hand From High-Density Electromyography. IEEE TNSRE 31, 3118–3131. https://doi.org/10/gsgk4s

.. GENERATED FROM PYTHON SOURCE LINES 14-75

.. code-block:: Python

    from functools import partial
    from pathlib import Path

    import numpy as np
    from scipy.signal import butter

    from myoverse.datasets.filters.emg_augmentations import WaveletDecomposition
    from myoverse.datasets.filters.generic import ApplyFunctionFilter, IndexDataFilter
    from myoverse.datasets.filters.temporal import SOSFrequencyFilter
    from myoverse.datasets.supervised import EMGDataset

    dataset = EMGDataset(
        emg_data_path=Path(r"data/emg.pkl").resolve(),
        ground_truth_data_path=Path(r"data/kinematics.pkl").resolve(),
        sampling_frequency=2044.0,
        tasks_to_use=["1", "2"],
        save_path=Path(r"data/dataset.zarr").resolve(),
        emg_filter_pipeline_after_chunking=[
            [
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(
                        4, [47.5, 52.5], "bandstop", output="sos", fs=2044
                    ),
                    is_output=True,
                    name="Raw No Powerline",
                ),
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(4, 20, "lowpass", output="sos", fs=2044),
                    is_output=True,
                    name="Raw No Powerline Lowpassed 20 Hz",
                ),
            ]
        ],
        emg_representations_to_filter_after_chunking=["Last"],
        ground_truth_filter_pipeline_before_chunking=[
            [
                ApplyFunctionFilter(function=np.reshape, newshape=(63, -1)),
                IndexDataFilter(indices=(slice(3, 63),)),
            ]
        ],
        ground_truth_representations_to_filter_before_chunking=["Input"],
        ground_truth_filter_pipeline_after_chunking=[
            [
                ApplyFunctionFilter(
                    function=partial(np.mean, axis=-1),
                    is_output=True,
                    name="Mean Kinematics per EMG Chunk",
                ),
            ]
        ],
        ground_truth_representations_to_filter_after_chunking=["Last"],
        testing_split_ratio=0.3,
        validation_split_ratio=0.1,
        augmentation_pipelines=[
            [WaveletDecomposition(nr_of_grids=5, is_output=True, level=2)]
        ],
    )

    dataset.create_dataset()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.76s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:03<00:00,  1.77s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:03<00:00,  1.77s/it]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   5%|▌         | 16/317 [00:00<00:01, 159.05it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  11%|█         | 34/317 [00:00<00:01, 166.19it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  16%|█▋        | 52/317 [00:00<00:01, 169.67it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  22%|██▏       | 70/317 [00:00<00:01, 171.66it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  28%|██▊       | 88/317 [00:00<00:01, 173.03it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  33%|███▎      | 106/317 [00:00<00:01, 172.78it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  39%|███▉      | 124/317 [00:00<00:01, 169.55it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  44%|████▍     | 141/317 [00:00<00:01, 161.11it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  50%|████▉     | 158/317 [00:00<00:01, 158.70it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  55%|█████▌    | 175/317 [00:01<00:00, 160.69it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  61%|██████    | 192/317 [00:01<00:00, 162.12it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  66%|██████▌   | 209/317 [00:01<00:00, 163.25it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  71%|███████▏  | 226/317 [00:01<00:00, 164.17it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  77%|███████▋  | 243/317 [00:01<00:00, 164.99it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  82%|████████▏ | 260/317 [00:02<00:00, 60.39it/s]     Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  88%|████████▊ | 278/317 [00:02<00:00, 76.02it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  93%|█████████▎| 296/317 [00:02<00:00, 92.10it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  99%|█████████▉| 314/317 [00:02<00:00, 108.05it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 127.32it/s]




.. GENERATED FROM PYTHON SOURCE LINES 76-79

Default dataset are also available. Here is an example of how to use the EMBCDataset used in [2]_.

.. [2] Sîmpetru, R.C., Osswald, M., Braun, D.I., Souza de Oliveira, D., Cakici, A.L., Del Vecchio, A., 2022. Accurate continuous prediction of 14 degrees of freedom of the hand from myoelectrical signals through convolutive deep learning, in: Proceedings of the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC). Presented at the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC), pp. 702–706. https://doi.org/10/gq2f47

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python

    from myoverse.datasets.defaults import EMBCDataset

    dataset = EMBCDataset(
        emg_data_path=Path(r"data/emg.pkl").resolve(),
        ground_truth_data_path=Path(r"data/kinematics.pkl").resolve(),
        save_path=Path(r"data/dataset.zarr").resolve(),
        tasks_to_use=["1", "2"],
    )

    dataset.create_dataset()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.10s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.08s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.08s/it]
    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 1/317 [00:01<08:14,  1.56s/it]    Augmenting with [GaussianNoise (GaussianNoise)]:   6%|▌         | 19/317 [00:01<00:19, 15.61it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  12%|█▏        | 39/317 [00:01<00:07, 35.12it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  19%|█▊        | 59/317 [00:01<00:04, 56.68it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  25%|██▍       | 79/317 [00:01<00:03, 79.10it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  31%|███       | 99/317 [00:02<00:02, 100.88it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  38%|███▊      | 119/317 [00:02<00:01, 120.86it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  44%|████▍     | 139/317 [00:02<00:01, 138.11it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  50%|█████     | 159/317 [00:02<00:01, 152.28it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  56%|█████▋    | 179/317 [00:02<00:00, 163.51it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  63%|██████▎   | 199/317 [00:02<00:00, 172.35it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  69%|██████▉   | 219/317 [00:02<00:00, 174.41it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  75%|███████▌  | 238/317 [00:02<00:00, 178.35it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  81%|████████  | 257/317 [00:02<00:00, 181.44it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  87%|████████▋ | 277/317 [00:03<00:00, 184.07it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  93%|█████████▎| 296/317 [00:03<00:00, 185.77it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  99%|█████████▉| 315/317 [00:03<00:00, 186.91it/s]    Augmenting with [GaussianNoise (GaussianNoise)]: 100%|██████████| 317/317 [00:03<00:00, 98.53it/s] 
    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   6%|▌         | 19/317 [00:00<00:01, 185.20it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  13%|█▎        | 40/317 [00:00<00:01, 192.85it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  19%|█▉        | 60/317 [00:00<00:01, 192.15it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  25%|██▌       | 80/317 [00:00<00:01, 194.11it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  32%|███▏      | 100/317 [00:00<00:01, 194.05it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  38%|███▊      | 120/317 [00:00<00:01, 191.23it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  44%|████▍     | 140/317 [00:00<00:00, 189.67it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  50%|█████     | 159/317 [00:00<00:00, 188.32it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  56%|█████▌    | 178/317 [00:00<00:00, 184.03it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  62%|██████▏   | 197/317 [00:01<00:00, 185.17it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  68%|██████▊   | 216/317 [00:01<00:00, 186.31it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  74%|███████▍  | 235/317 [00:01<00:00, 186.84it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  80%|████████  | 254/317 [00:01<00:00, 187.10it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  86%|████████▌ | 273/317 [00:01<00:00, 187.64it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  92%|█████████▏| 292/317 [00:01<00:00, 187.86it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  98%|█████████▊| 311/317 [00:01<00:00, 185.99it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]: 100%|██████████| 317/317 [00:01<00:00, 188.02it/s]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   4%|▍         | 12/317 [00:00<00:02, 116.20it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   9%|▉         | 28/317 [00:00<00:02, 138.59it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  14%|█▍        | 44/317 [00:00<00:01, 146.27it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  19%|█▊        | 59/317 [00:00<00:01, 147.26it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  23%|██▎       | 74/317 [00:00<00:01, 147.96it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  28%|██▊       | 89/317 [00:00<00:01, 139.94it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  33%|███▎      | 104/317 [00:00<00:01, 142.26it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  38%|███▊      | 119/317 [00:00<00:01, 144.13it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  42%|████▏     | 134/317 [00:00<00:01, 145.46it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  47%|████▋     | 149/317 [00:01<00:01, 146.30it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  52%|█████▏    | 164/317 [00:01<00:01, 146.64it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  56%|█████▋    | 179/317 [00:01<00:00, 147.36it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  61%|██████    | 194/317 [00:01<00:00, 147.50it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  66%|██████▌   | 209/317 [00:01<00:00, 146.52it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  71%|███████   | 224/317 [00:01<00:00, 146.49it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  75%|███████▌  | 239/317 [00:01<00:00, 140.10it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  80%|████████  | 254/317 [00:01<00:00, 141.80it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  85%|████████▍ | 269/317 [00:01<00:00, 143.35it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  90%|████████▉ | 284/317 [00:01<00:00, 145.15it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  94%|█████████▍| 299/317 [00:02<00:00, 146.42it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  99%|█████████▉| 314/317 [00:02<00:00, 146.46it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 144.65it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.205 seconds)

**Estimated memory usage:**  1427 MB


.. _sphx_glr_download_auto_examples_3_create_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_create_dataset.ipynb <3_create_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_create_dataset.py <3_create_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 3_create_dataset.zip <3_create_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
